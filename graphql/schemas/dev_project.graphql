extend type Mutation {
    create_dev_project(input: CreateDevProjectInput! @spread): DevProject @guard @field(resolver: "App\\GraphQL\\Mutations\\DevProjectMutations@createDevProject")
    edit_dev_project(input: EditDevProjectInput! @spread): DevProject @guard @field(resolver: "App\\GraphQL\\Mutations\\DevProjectMutations@editDevProject")
    upsert_dev_project(input: UpsertDevProjectInput! @spread): DevProject @guard @field(resolver: "App\\GraphQL\\Mutations\\DevProjectMutations@upsertDevProject")
    delete_dev_project(id: ID! @rules(apply: ["required","App\\Rules\\OwnerCheckDevProject"]) @spread): Boolean @guard @field(resolver: "App\\GraphQL\\Mutations\\DevProjectMutations@deleteDevProject")
}
extend type Query {
    devProjects: [DevProject!]! @field(resolver: "App\\GraphQL\\Queries\\DevProjectQueries@listDevProject")
    sortDevProjects(orderBy: [OrderByClause] @orderBy): [DevProject!]! @paginate(type: "paginator" model: "App\\Models\\DevProject")
    
    detail_dev_project(id: ID! @spread): DevProject @field(resolver: "App\\GraphQL\\Queries\\DevProjectQueries@detailDevProject")
    myDevProjects: [MyDevProjects] @field(resolver: "App\\GraphQL\\Queries\\DevProjectQueries@listMyDevProject")
    searchDevProjects(input : SearchDevProject ): ListPaginate! @field(resolver: "App\\GraphQL\\Queries\\DevProjectQueries@searchDevProjects")
    similarDevProjects(id: ID, limit:Int): [DevProject!]! @field(resolver: "App\\GraphQL\\Queries\\DevProjectQueries@similarDevProjects")
}

input SearchDevProject {
    search_key : String
    category : String
    per_page:Int
    current_page:Int
    sort_field : String
    sort_order : String
}
type ListPaginate {
    devProjects: [DevProject!]!
    paginator: PaginateInfo
}

type DevProject {
    id: ID
    name: String
    status : String
    description : String
    attachments : JSON
    free_support : JSON
    fee_support : JSON
    categories : JSON
    demo_link : String
    price : String
    sale_price : String
    approved : Boolean
    purchases : Int
    total : String
    user: User!
    created_at: DateTime
    updated_at: DateTime
}

type PaginateInfo {
    total: Int
    per_page: Int
    current_page: Int
    last_page: Int
    total_count : Int
    next_page_url: String
    prev_page_url: String
    from: Int
    to: Int
}

input CreateDevProjectInput {
    name: String! @rules(apply:["required"])
    status : String
    description : String
    attachments : JSON
    free_support : JSON
    fee_support : JSON
    categories : JSON
    demo_link : String
    price : Float
    sale_price : Float
}
input EditDevProjectInput {
    id: ID! @rules(apply: ["required","App\\Rules\\OwnerCheckDevProject"])
    name: String @rules(apply:["required"])
    status : String
    description : String
    attachments : JSON
    free_support : JSON
    fee_support : JSON
    categories : JSON
    demo_link : String
    price : String
    sale_price : String
}
input UpsertDevProjectInput {
    id: ID
    name: String @rules(apply:["required"])
    status : String
    description : String
    attachments : JSON
    free_support : JSON
    fee_support : JSON
    categories : JSON
    demo_link : String
    price : String
    sale_price : String
}
type MyDevProjects {
    created_at : String
    projects: [DevProject]
}
