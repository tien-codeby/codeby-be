extend type Mutation {
    create_dev_project(input: CreateDevProjectInput! @spread): DevProject @guard @field(resolver: "App\\GraphQL\\Mutations\\DevProjectMutations@createDevProject")
    edit_dev_project(input: EditDevProjectInput! @spread): DevProject @guard @field(resolver: "App\\GraphQL\\Mutations\\DevProjectMutations@editDevProject")
    delete_dev_project(id: ID! @rules(apply: ["required","App\\Rules\\OwnerCheckDevProject"]) @spread): Boolean @guard @field(resolver: "App\\GraphQL\\Mutations\\DevProjectMutations@deleteDevProject")
}
extend type Query {
    devProjects: [DevProject!]! @field(resolver: "App\\GraphQL\\Queries\\DevProjectQueries@listDevProject")
    sortDevProjects(orderBy: [OrderByClause] @orderBy): [DevProject!]! @paginate(type: "paginator" model: "App\\Models\\DevProject")
    
    myDevProjects: [DevProject!]! @field(resolver: "App\\GraphQL\\Queries\\DevProjectQueries@listMyDevProject")
    searchDevProjects(search_key : String!): [DevProject!]! @field(resolver: "App\\GraphQL\\Queries\\DevProjectQueries@searchDevProjects")
}

type DevProject{
    id: ID
    name: String
    status : String
    attachments : JSON
    free_support : JSON
    fee_support : JSON
    categories : JSON
    demo_link : String
    price : Float
    sale_price : Float
    user: User!
    created_at: DateTime!
    updated_at: DateTime!
}

input CreateDevProjectInput{
    name: String! @rules(apply:["required"])
    status : String
    attachments : JSON
    free_support : JSON
    fee_support : JSON
    categories : JSON
    demo_link : String
    price : Float
    sale_price : Float
}
input EditDevProjectInput{
    id: ID! @rules(apply: ["required","App\\Rules\\OwnerCheckDevProject"])
    name: String @rules(apply:["required"])
    status : String
    attachments : JSON
    free_support : JSON
    fee_support : JSON
    categories : JSON
    demo_link : String
    price : Float
    sale_price : Float
}
