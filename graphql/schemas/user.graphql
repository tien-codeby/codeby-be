extend type Mutation {
    edit_user(input: EditUserInput! @spread): User @guard @field(resolver: "App\\GraphQL\\Mutations\\UserMutations@editUser")
    reset_user_password(input: resetUserPasswordInput @spread): ForgotPasswordResponse! @field(resolver: "App\\GraphQL\\Mutations\\UserMutations@resetUserPassword")
}

extend type Query {
    detail_me: User @guard @field(resolver: "App\\GraphQL\\Queries\\UserQueries@detailMe")
    list_user(fullname: String): [User] @field(resolver: "App\\GraphQL\\Queries\\UserQueries@listUser")
    detail_user(id: ID! @eq): User @find
}

type User {
    id: ID!
    fullname: String!
    email: String!
    phone : String
    avatar : JSON
    created_at: DateTime!
    updated_at: DateTime!
}

input resetUserPasswordInput {
    email: String! @rules(apply: ["required", "email"])
    token: String
    code: String
    password: String! @rules(apply: ["required", "confirmed", "min:8"])
    password_confirmation: String!
}

input EditUserInput{
    fullname: String
    email: String @rules(apply: ["email", "App\\Rules\\UniqueCheckUser"])
    phone:String
    avatar : JSON
    media_ids: [ID]
    password: String @rules(apply: ["nullable", "confirmed", "min:8"])
    password_confirmation: String
}
