extend type Mutation {
    create_customer_project(input: CreateCustomerProjectInput! @spread): CustomerProject @guard @field(resolver: "App\\GraphQL\\Mutations\\CustomerProjectMutations@createCustomerProject")
    edit_customer_project(input: EditCustomerProjectInput! @spread): CustomerProject @guard @field(resolver: "App\\GraphQL\\Mutations\\CustomerProjectMutations@editCustomerProject")
    delete_customer_project(id: ID! @rules(apply: ["required","App\\Rules\\OwnerCheckCustomerProject"]) @spread): Boolean @guard @field(resolver: "App\\GraphQL\\Mutations\\CustomerProjectMutations@deleteCustomerProject")
}
extend type Query {
    customerProjects: [CustomerProject!]! @field(resolver: "App\\GraphQL\\Queries\\CustomerProjectQueries@listCustomerProject")
    sortcustomerProjects(orderBy: [OrderByClause] @orderBy): [CustomerProject!]! @paginate(type: "paginator" model: "App\\Models\\CustomerProject")
    
    mycustomerProjects: [CustomerProject!]! @field(resolver: "App\\GraphQL\\Queries\\CustomerProjectQueries@listMyCustomerProject")
    searchcustomerProjects(search_key : String!): [CustomerProject!]! @field(resolver: "App\\GraphQL\\Queries\\CustomerProjectQueries@searchCustomerProjects")
}

type CustomerProject{
    id: ID
    name: String
    description: String
    attachments : JSON
    payment_type : String
    price_range : String
    user: User!
    created_at: DateTime!
    updated_at: DateTime!
}

input CreateCustomerProjectInput{
    name: String! @rules(apply:["required"])
    description: String
    attachments : JSON
    payment_type : String
    price_range : String
}
input EditCustomerProjectInput{
    id: ID! @rules(apply: ["required","App\\Rules\\OwnerCheckCustomerProject"])
    name: String @rules(apply:["required"])
    name: String
    description: String
    attachments : JSON
    payment_type : String
    price_range : String
}
